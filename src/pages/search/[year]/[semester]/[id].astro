---
import Layout from "@/src/layouts/layout.astro";
import { styles } from "@/styles/style";
import { getReviews } from "@/utils/reviews";
import SimilarCourses from "@/components/similar-courses.astro";
import CourseInfo from "@/src/components/course-info.astro";
import {
    CourseSummarySchema,
    CourseScoreSchema,
    CourseAttributesSchema,
} from "@/types/schema";
import type {
    CourseScore as CourseScoreType,
    CourseAttributes,
} from "@/types/schema";
import CourseScore from "@/src/components/course-score.astro";
import CourseAttribute from "@/src/components/course-attribute.astro";
import Tabs from "@/src/components/tabs.astro";
import Loading from "@/src/components/loading.astro";
import ReView from "@/src/components/re-view.astro";
import { z } from "astro/zod";
export const prerender = false;

import { NEXT_PAIR } from "@/utils/const";

const year = Astro.params.year;
const semester = Astro.params.semester;
const courseId = Astro.params.id;

if (!courseId || !year || !semester) {
    return new Response("Not Found", { status: 404 });
} else if (semester != "0" && semester != "1") {
    return Astro.redirect("/search", 302);
}
const popOrScore: boolean = NEXT_PAIR().year === year;

const reviews = await getReviews(courseId);
const url = new URL(`/api/courses/${year}/${semester}/data.json`, Astro.url);
let res;
try {
    res = await fetch(url);
} catch (e) {
    return new Response("Internal Server Error: " + e, { status: 500 });
}
if (res.status !== 200) {
    return new Response("Internal Server Error: Response is not Defined", {
        status: 500,
    });
}
const resonse = await res.json();
if (!resonse) {
    return new Response("Internal Server Error: Response is not Correct", {
        status: 500,
    });
}
const coursesResult = z.array(CourseSummarySchema).safeParse(resonse);
if (!coursesResult.success) {
    return new Response("Internal Server Error: No Course Found", {
        status: 500,
    });
}
const courses = coursesResult.data;
const course = courses.find((course) => year + course.id === courseId);

if (!course) {
    return new Response("Course Not Found", { status: 404 });
}
const scores: CourseScoreType[] = reviews
    ? reviews.map((review) => {
          return CourseScoreSchema.parse(review);
      })
    : [];

const attributes: CourseAttributes[] = reviews
    ? reviews.map((review) => {
          return CourseAttributesSchema.parse(review);
      })
    : [];

import { actions } from "astro:actions";
const result = Astro.getActionResult(actions.course.addFavorite);
---

<Layout>
    <title slot="title">ハム大クロバス | 感想検索</title>
    <meta
        name="description"
        content="感想を共有して履修登録を助け合おう！"
        slot="description"
    />

    <CourseInfo id={courseId} />

    <Tabs>
        {
            popOrScore ? (
                <Fragment slot="tab-0">人気</Fragment>
            ) : (
                <Fragment slot="tab-1">評価</Fragment>
            )
        }
        <Fragment slot="tab-2">感想</Fragment>
        <Fragment slot="tab-3">関連</Fragment>

        {
            popOrScore ? (
                <section
                    slot="panel-0"
                    class="flex justify-center py-8 flex-col items-center"
                >
                    <astro-post-fav data-action-course={courseId}>
                        <p>
                            この授業をお気にリ登録した人:
                            {Astro.callAction(actions.course.getFavorite, {
                                course_id: courseId,
                            }).then((res) => res.data?.count)}
                            人
                        </p>
                        <form method="POST" action={actions.course.addFavorite}>
                            <input
                                type="hidden"
                                name="course_id"
                                value={courseId}
                            />
                            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed">
                                お気に入りに追加
                            </button>
                        </form>
                    </astro-post-fav>
                </section>
            ) : (
                <section slot="panel-1">
                    {scores.length === 0 ? (
                        <div class="text-center my-8">
                            <p class="text-gray-600 dark:text-gray-400">
                                おすすめ度の情報が提供されていません。
                            </p>
                        </div>
                    ) : (
                        <CourseScore scores={scores} />
                    )}
                    <div class="my-2" />
                    {attributes.length === 0 ? (
                        <div class="text-center my-8">
                            <p class="text-gray-600 dark:text-gray-400">
                                授業形態の情報が提供されていません。
                            </p>
                        </div>
                    ) : (
                        <CourseAttribute attributes={attributes} />
                    )}
                </section>
            )
        }

        <section slot="panel-2">
            {
                !reviews ? (
                    <Loading />
                ) : (
                    <ReView reviews={reviews} server:defer>
                        <Loading slot="fallback" />
                    </ReView>
                )
            }
        </section>

        <section slot="panel-3" class={styles.section.container}>
            <div class="mb-6">
                <h2 class={`${styles.section.title} my-4`}>関連授業</h2>
                <p class={`text-gray-600 dark:text-gray-400 mb-4`}>
                    以下の授業は名前、担当教員、キャンパスなどの情報から同じ内容と思われる授業を掲載しています。
                </p>
            </div>
            <SimilarCourses
                year={year}
                courseId={courseId}
                name={course.name}
                teachers={course.teachers}
                campus={course.campus}
                period={course.period}
                semester={course.semester
                    ? course.semester
                    : year + "年度" + (semester == "0" ? "前期" : "後期")}
                server:defer
            >
                <span slot="fallback" class={styles.loading.fallbackText}>
                    Loading
                    <span class={styles.loading.spinner}></span>
                </span>
            </SimilarCourses>
        </section>
    </Tabs>
</Layout>

<script>
    import { addFavorite, isFavorite } from "@/utils/store";
    class AstroPostFav extends HTMLElement {
        constructor() {
            super();
            const courseId = this.getAttribute("data-action-course") as string;
            this.addEventListener("click", () => {
                addFavorite(courseId);
            });
            if (isFavorite(courseId)) {
                const button = this.querySelector("button");
                if (button) {
                    button.disabled = true;
                }
            }
        }
    }

    customElements.define("astro-post-fav", AstroPostFav);
</script>
