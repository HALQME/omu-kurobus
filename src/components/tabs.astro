---
import crypto from "node:crypto";

export interface Props extends astroHTML.JSX.HTMLAttributes {}

const props = Astro.props as Props;
export const prerender = false;

const tabs: string[] = [];
const panels: string[] = [];

let inlineStyles = "";

// タブとパネルのスロット名を収集
Object.entries(Astro.slots).forEach(([name]) => {
    if (name.startsWith("tab")) {
        tabs.push(name);
    } else if (name.startsWith("panel")) {
        panels.push(name);
    }
});

// タブをソート（tab-0, tab-1, ... の順になるようにする）
tabs.sort((a, b) => {
    const indexA = parseInt(a.replace("tab-", ""));
    const indexB = parseInt(b.replace("tab-", ""));
    return indexA - indexB;
});

// パネルもソート
panels.sort((a, b) => {
    const indexA = parseInt(a.replace("panel-", ""));
    const indexB = parseInt(b.replace("panel-", ""));
    return indexA - indexB;
});

const uid = crypto.randomUUID();
let activeTabIndex = 0;
---

<div
    {...{ ...props, class: undefined, "class:list": undefined }}
    class:list={["tabs", "relative", props["class:list"], props.class]}
>
    <style set:html={inlineStyles}></style>

    <nav
        class="flex overflow-x-auto border-b border-gray-200 dark:border-gray-700"
    >
        {
            tabs.map(async (name, idx) => {
                const tabIndex = parseInt(name.replace("tab-", ""));
                const render = await Astro.slots.render(name);
                const tabId = `tab-${uid}-${tabIndex}`;

                return (
                    <div class:list={["tab-wrapper", `tab-${tabIndex}`]}>
                        <button
                            id={tabId}
                            type="button"
                            data-tab-index={tabIndex}
                            class:list={[
                                "tab",
                                "block",
                                "whitespace-nowrap",
                                "cursor-pointer",
                                "py-2",
                                "px-4",
                                "font-medium",
                                "transition-colors",
                                "duration-300",
                                "border-b-2",
                            ]}
                        >
                            <>{render}</>
                        </button>
                    </div>
                );
            })
        }
    </nav>

    <div class="relative">
        {
            panels.map(async (name, idx) => {
                const panelIndex = parseInt(name.replace("panel-", ""));
                const panelId = `panel-${uid}-${panelIndex}`;
                const content = await Astro.slots.render(name);

                return (
                    <div
                        id={panelId}
                        data-panel-index={panelIndex}
                        class:list={[
                            `panel-${panelIndex}`,
                            "panel",
                            "hidden", // 最初はすべて非表示
                        ]}
                        set:html={content}
                    />
                );
            })
        }
    </div>
</div>

<script>
    const defaultTabClasses = [
        "text-gray-500",
        "hover:text-gray-600",
        "border-transparent",
        "hover:border-gray-300",
        "dark:text-gray-400",
        "dark:hover:text-gray-300",
        "dark:border-transparent",
        "dark:hover:border-gray-700",
    ];

    const activeTabClasses = [
        "text-gray-700",
        "hover:text-gray-800",
        "border-blue-300",
        "dark:text-gray-200",
        "dark:hover:text-gray-100",
        "dark:border-blue-600",
    ];

    document.addEventListener("DOMContentLoaded", () => {
        const tabsContainers = document.querySelectorAll(".tabs");

        tabsContainers.forEach((tabsContainer) => {
            const tabButtons = tabsContainer.querySelectorAll("button.tab");
            const tabPanels = tabsContainer.querySelectorAll(".panel");

            const activateTab = (tab: Element) => {
                // すべてのタブをデフォルト状態にリセット
                tabButtons.forEach((tabBtn) => {
                    activeTabClasses.forEach((cls) =>
                        tabBtn.classList.remove(cls)
                    );
                    defaultTabClasses.forEach((cls) =>
                        tabBtn.classList.add(cls)
                    );
                });

                // パネルを非表示に
                tabPanels.forEach((panel) => {
                    panel.classList.add("hidden");
                    panel.classList.remove("block");
                });

                // アクティブタブの設定
                defaultTabClasses.forEach((cls) => tab.classList.remove(cls));
                activeTabClasses.forEach((cls) => tab.classList.add(cls));

                // 対応するパネルを表示
                const tabIndex = tab.getAttribute("data-tab-index");
                const targetPanel = tabsContainer.querySelector(
                    `.panel[data-panel-index="${tabIndex}"]`
                );

                if (targetPanel) {
                    targetPanel.classList.remove("hidden");
                    targetPanel.classList.add("block");
                }
            };

            tabButtons.forEach((tab) => {
                tab.addEventListener("click", () => activateTab(tab));
                tab.addEventListener("tap", () => activateTab(tab));
            });

            if (tabButtons.length > 0) {
                activateTab(tabButtons[0]);
            }
        });
    });
</script>
