---
import type { Course, SearchResult } from "@/types/schema";
interface Props {
    target: "search" | "submit";
}
const { target } = Astro.props;
import { AVAILABLE_PAIRS } from "@/utils/const";
import { search } from "@/utils/search";
import { parseClassCode } from "@/utils/common";
export const prerender = false;

declare global {
    interface Window {
        handleInput: (
            inputId: string,
            field: "course" | "teacher" | "campus"
        ) => void;
        clearSuggestions: (inputId: string) => void;
        selectSuggestion: (inputId: string, suggestion: string) => void;
        handleClassCodeInput: (value: string) => void;
        handleClassCodeSelect: (value: string) => void;
    }
}

// 入力値を保持するための変数を初期化
let year: string | undefined;
let semester: string | undefined;
let course: string | undefined;
let teacher: string | undefined;
let campus: string | undefined;
let class_code: string | undefined;
let year_semester_value: string | undefined;

// 検索結果を保存する変数
let searchResults: SearchResult[] = [];
let searchError: string | null = null;

if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();

        year_semester_value = data.get("year_semester")?.toString();
        if (year_semester_value) {
            const parts = year_semester_value.split("/");
            year = parts[0];
            semester = parts[1];
        } else {
            const defaultPair = AVAILABLE_PAIRS().find(
                (pair: { type: string }) => pair.type == target
            );
            if (defaultPair) {
                year = defaultPair.path.year;
                semester = defaultPair.path.semester;
                year_semester_value = `${year}/${semester}`;
            }
        }

        if (data.has("course")) {
            course = data.get("course")?.toString();
        }
        if (data.has("teacher")) {
            teacher = data.get("teacher")?.toString();
        }
        if (data.has("campus")) {
            campus = data.get("campus")?.toString();
        }
        if (data.has("class-code")) {
            class_code = data.get("class-code")?.toString();
        }

        // 検索パラメータが揃ったら検索を実行
        if (year && semester) {
            try {
                // 適切なURLを構築
                const courseUrl = new URL(
                    `api/courses/${year}/${semester}/data.json`,
                    Astro.url.origin
                );

                const response = await fetch(courseUrl);
                if (!response.ok) {
                    throw new Error(
                        `Failed to fetch courses: ${response.status}`
                    );
                }

                const json = await response.json();
                const courses = Array.isArray(json)
                    ? json
                    : (json.data as Course[]);

                // 検索実行前のパラメータをログ
                const searchParams = {
                    year,
                    semester,
                    course,
                    teacher,
                    campus,
                    class_code: class_code && parseClassCode(class_code),
                };

                // 検索実行
                searchResults = await search(
                    {
                        ...searchParams,
                    },
                    courses
                );
            } catch (error) {
                console.error("Error during search:", error);
                searchError =
                    error instanceof Error
                        ? error.message
                        : "Unknown error occurred";
                searchResults = [];
            }
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
            searchError = error.message;
        }
    }
}
---

<astro-search-from data-target={target}>
    <form
        class="bg-white dark:bg-gray-900 rounded-lg p-6 max-w-3xl mx-auto space-y-4 transition-colors"
        method="POST"
        astro-data={target}
    >
        <div class="mb-4">
            <label
                for="year_semester"
                class="block text-gray-700 dark:text-gray-300 font-medium mb-2"
                >年・学期</label
            >
            <select
                id="year_semester"
                name="year_semester"
                class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
                {
                    AVAILABLE_PAIRS().map(
                        (pair) =>
                            pair.type == target && (
                                <option
                                    value={`${pair.path.year}/${pair.path.semester}`}
                                    selected={
                                        year_semester_value ===
                                        `${pair.path.year}/${pair.path.semester}`
                                    }
                                >
                                    {pair.path.year}年度
                                    {pair.path.semester == "0"
                                        ? "前期"
                                        : "後期"}
                                </option>
                            )
                    )
                }
            </select>
        </div>
        <div class="mb-4 relative">
            <label
                for="course"
                class="block text-gray-700 dark:text-gray-300 font-medium mb-2"
                >授業名</label
            >
            <input
                id="course"
                name="course"
                type="text"
                value={course || ""}
                class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                autocomplete="off"
                oninput="handleInput('course', 'course')"
                onblur="setTimeout(() => clearSuggestions('course'), 200)"
                required
            />
            <div
                id="course-suggestions"
                class="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg hidden"
            >
            </div>
        </div>
        <div class="mb-4 relative">
            <label
                for="teacher"
                class="block text-gray-700 dark:text-gray-300 font-medium mb-2"
                >教員名</label
            >
            <input
                id="teacher"
                name="teacher"
                type="text"
                value={teacher || ""}
                class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                autocomplete="off"
                oninput="handleInput('teacher', 'teacher')"
                onblur="setTimeout(() => clearSuggestions('teacher'), 200)"
            />
            <div
                id="teacher-suggestions"
                class="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg hidden"
            >
            </div>
        </div>
        <div class="mb-4 relative">
            <label
                for="campus"
                class="block text-gray-700 dark:text-gray-300 font-medium mb-2"
                >キャンパス</label
            >
            <input
                id="campus"
                name="campus"
                type="text"
                value={campus || ""}
                class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                autocomplete="off"
                oninput="handleInput('campus', 'campus')"
                onblur="setTimeout(() => clearSuggestions('campus'), 200)"
            />
            <div
                id="campus-suggestions"
                class="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg hidden"
            >
            </div>
        </div>
        {
            /*
        <div class="mb-4">
            <label
                for="class-code"
                class="block text-gray-700 dark:text-gray-300 font-medium mb-2"
                >設置部局</label
            >
            <div class="flex flex-col sm:flex-row gap-2">
                <div class="relative flex-1">
                    <input
                        type="text"
                        id="class-code-text"
                        class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white h-10"
                        placeholder="設置部局のIDを入力"
                        autocomplete="off"
                        oninput="handleClassCodeInput(this.value)"
                        value={class_code?.length === 14
                            ? class_code.slice(5, 8)
                            : class_code || ""}
                        maxlength="4"
                        data-error-message="3〜4文字のIDのみ許可されています"
                    />
                    <div
                        id="class-code-error"
                        class="text-red-500 text-sm mt-1 hidden"
                    >
                    </div>
                </div>
                <div class="sm:w-64 w-full">
                    <select
                        id="class-code"
                        name="class-code"
                        class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white h-10"
                        onchange="handleClassCodeSelect(this.value)"
                    >
                        <option value="">選択してください</option>
                        {
                            CLASS_IDs.map((group) =>
                                group.group ? (
                                    <optgroup
                                        label={group.group}
                                        class="font-medium"
                                    >
                                        {group.items.map(
                                            (item: {
                                                id:
                                                    | string
                                                    | number
                                                    | string[]
                                                    | null
                                                    | undefined;
                                                name: unknown;
                                            }) => (
                                                <option
                                                    value={item.id}
                                                    selected={
                                                        class_code === item.id
                                                    }
                                                    data-name={item.name}
                                                >
                                                    {item.name}
                                                </option>
                                            )
                                        )}
                                    </optgroup>
                                ) : (
                                    group.items.map(
                                        (item: {
                                            id:
                                                | string
                                                | number
                                                | string[]
                                                | null
                                                | undefined;
                                            name: unknown;
                                        }) => (
                                            <option
                                                value={item.id}
                                                selected={
                                                    class_code === item.id
                                                }
                                                data-name={item.name}
                                            >
                                                {item.name}
                                            </option>
                                        )
                                    )
                                )
                            )
                        }
                    </select>
                </div>
            </div>
        </div>
        */
        }
        <div class="mt-6">
            <button
                type="submit"
                class="w-full px-4 py-2 mb-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:bg-blue-500 dark:hover:bg-blue-600"
            >
                検索
            </button>
            <button
                type="reset"
                class="w-full px-4 py-2 bg-gray-600 hover:bg-red-700 text-white font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:bg-red-500 dark:hover:bg-red-600"
            >
                リセット
            </button>
        </div>
    </form>
    {/* 検索結果表示部分 */}
    {
        Astro.request.method === "POST" && (
            <div class="mt-8">
                {searchError && (
                    <div class="p-4 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200 rounded-lg mb-6">
                        <p class="font-medium">エラーが発生しました</p>
                    </div>
                )}
                {!searchError && searchResults.length === 0 && (
                    <div class="p-4 bg-yellow-50 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200 rounded-lg">
                        <p>
                            検索条件に一致する授業が見つかりませんでした。検索条件を変更してお試しください。
                        </p>
                    </div>
                )}
                {searchResults.length > 0 && (
                    <div>
                        {/* 検索結果を一致度で分類 */}
                        {(() => {
                            // 教員名を省略する関数
                            const truncateTeacherName = (
                                name: string,
                                maxLength: number = 15
                            ) => {
                                return name && name.length > maxLength
                                    ? `${name.substring(0, maxLength)}...`
                                    : name;
                            };

                            // スコアによって検索結果を分類
                            const highMatchResults = searchResults.filter(
                                (r) => !r.score || r.score < 0.333
                            );
                            const lowMatchResults = searchResults.filter(
                                (r) =>
                                    r.score && r.score >= 0.2 && r.score < 0.65
                            );

                            return (
                                <>
                                    <h2 class="text-xl font-bold mb-4 text-gray-800 dark:text-gray-200">
                                        検索結果: {searchResults.length}件
                                    </h2>

                                    {/* 一致度の高い結果を表示 */}
                                    {highMatchResults.length > 0 && (
                                        <div class="space-y-4 mb-6">
                                            {highMatchResults.map((result) => (
                                                <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4 bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition-shadow">
                                                    <div class="flex justify-between items-start mb-2">
                                                        <h3 class="text-lg font-semibold text-blue-600 dark:text-blue-400">
                                                            {result.name}
                                                        </h3>
                                                        <span class="px-2 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300 rounded">
                                                            {result.code ||
                                                                "コード不明"}
                                                        </span>
                                                    </div>
                                                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
                                                        <div class="flex">
                                                            <span class="w-20 font-medium text-gray-500 dark:text-gray-400">
                                                                教員:
                                                            </span>
                                                            <span
                                                                class="text-gray-800 dark:text-gray-200 flex-1"
                                                                title={
                                                                    result.teachers ||
                                                                    ""
                                                                }
                                                            >
                                                                {truncateTeacherName(
                                                                    result.teachers
                                                                ) || "記載なし"}
                                                            </span>
                                                        </div>
                                                        <div class="flex">
                                                            <span class="w-20 font-medium text-gray-500 dark:text-gray-400">
                                                                キャンパス:
                                                            </span>
                                                            <span class="text-gray-800 dark:text-gray-200 flex-1">
                                                                {result.campus ||
                                                                    "記載なし"}
                                                            </span>
                                                        </div>
                                                        <div class="flex">
                                                            <span class="w-20 font-medium text-gray-500 dark:text-gray-400">
                                                                時限:
                                                            </span>
                                                            <span class="text-gray-800 dark:text-gray-200 flex-1">
                                                                {result.period ||
                                                                    "記載なし"}
                                                            </span>
                                                        </div>
                                                        <div class="flex">
                                                            <span class="w-20 font-medium text-gray-500 dark:text-gray-400">
                                                                年度・学期:
                                                            </span>
                                                            <span class="text-gray-800 dark:text-gray-200 flex-1">
                                                                {result.semester ||
                                                                    "記載なし"}
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    )}

                                    {/* 一致度の低い結果を「もしかして」セクションとして表示 */}
                                    {lowMatchResults.length > 0 && (
                                        <div class="mt-8">
                                            <h3 class="text-lg font-medium mb-3 text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-700 pb-2">
                                                もしかして
                                            </h3>
                                            <div class="space-y-3">
                                                {lowMatchResults.map(
                                                    (result) => (
                                                        <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-3 bg-white dark:bg-gray-800 shadow-sm opacity-80 hover:opacity-100 transition-opacity">
                                                            <div class="flex justify-between items-start mb-1">
                                                                <h4 class="text-md font-medium text-gray-700 dark:text-gray-300">
                                                                    {
                                                                        result.name
                                                                    }
                                                                </h4>
                                                                <span class="px-2 py-0.5 text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded">
                                                                    {result.code ||
                                                                        "コード不明"}
                                                                </span>
                                                            </div>
                                                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-1 text-sm">
                                                                <div class="flex">
                                                                    <span class="w-20 font-medium text-gray-500 dark:text-gray-400">
                                                                        教員:
                                                                    </span>
                                                                    <span
                                                                        class="text-gray-600 dark:text-gray-300 flex-1"
                                                                        title={
                                                                            result.teachers ||
                                                                            ""
                                                                        }
                                                                    >
                                                                        {truncateTeacherName(
                                                                            result.teachers,
                                                                            12
                                                                        ) ||
                                                                            "記載なし"}
                                                                    </span>
                                                                </div>
                                                                <div class="flex">
                                                                    <span class="w-20 font-medium text-gray-500 dark:text-gray-400">
                                                                        キャンパス:
                                                                    </span>
                                                                    <span class="text-gray-600 dark:text-gray-300 flex-1">
                                                                        {result.campus ||
                                                                            "記載なし"}
                                                                    </span>
                                                                </div>
                                                                <div class="flex">
                                                                    <span class="w-20 font-medium text-gray-500 dark:text-gray-400">
                                                                        時限:
                                                                    </span>
                                                                    <span class="text-gray-600 dark:text-gray-300 flex-1">
                                                                        {result.period ||
                                                                            "記載なし"}
                                                                    </span>
                                                                </div>
                                                                <div class="flex">
                                                                    <span class="w-20 font-medium text-gray-500 dark:text-gray-400">
                                                                        年度・学期:
                                                                    </span>
                                                                    <span class="text-gray-600 dark:text-gray-300 flex-1">
                                                                        {result.semester ||
                                                                            "記載なし"}
                                                                    </span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    )
                                                )}
                                            </div>
                                        </div>
                                    )}
                                </>
                            );
                        })()}
                    </div>
                )}
            </div>
        )
    }
</astro-search-from>

<script>
    import { getAutocompleteSuggestions } from "@/utils/suggest";
    import type { Course } from "@/types/schema";
    class AstroSearchForm extends HTMLElement {
        constructor() {
            super();
            let courseData: Course[] = [];

            function parseClassCode(code: string): string {
                if (!code) return "";

                if (code.length === 14) {
                    return code.substring(5, 8);
                }

                if (code.length >= 3 && code.length <= 4) {
                    return code;
                }

                return code;
            }

            async function fetchCourseData() {
                try {
                    if (courseData.length > 0) return; // 既にデータがある場合は再取得しない

                    const yearSemesterSelect = document.getElementById(
                        "year_semester"
                    ) as HTMLSelectElement;
                    const selectedValue = yearSemesterSelect.value;
                    if (!selectedValue) {
                        console.error("Year/semester not selected");
                        return;
                    }

                    const [year, semester] = selectedValue.split("/");
                    if (!year || !semester) {
                        console.error("Invalid year/semester format");
                        return;
                    }

                    const courseUrl = `${window.location.origin}/api/courses/${year}/${semester}/data.json`;

                    const response = await fetch(courseUrl);
                    if (!response.ok) {
                        throw new Error(
                            `Failed to fetch course data: ${response.status}`
                        );
                    }

                    const json = await response.json();
                    courseData = Array.isArray(json) ? json : json.data || [];
                } catch (error) {
                    console.error("Failed to fetch course data:", error);
                }
            }

            async function handleInput(
                inputId: string,
                field: "course" | "teacher" | "campus"
            ) {
                const input = document.getElementById(
                    inputId
                ) as HTMLInputElement;
                const suggestionsDiv = document.getElementById(
                    `${inputId}-suggestions`
                ) as HTMLDivElement;

                if (!courseData.length) {
                    await fetchCourseData();
                }

                const searchText = input.value.trim();
                if (!searchText) {
                    suggestionsDiv.innerHTML = "";
                    suggestionsDiv.classList.add("hidden");
                    return;
                }

                const suggestions = await getAutocompleteSuggestions(
                    searchText,
                    courseData,
                    field
                );

                if (suggestions.length > 0) {
                    suggestionsDiv.innerHTML = suggestions
                        .map((suggestion) => {
                            const score = suggestion.score || 0;
                            let matchClass = "";

                            if (score < 0.1) {
                                matchClass = "border-l-4 border-green-500";
                            } else if (score < 0.4) {
                                matchClass = "border-l-4 border-sky-500";
                            } else if (score < 0.6) {
                                matchClass = "border-l-4 border-yellow-500";
                            } else if (score < 0.8) {
                                matchClass = "border-l-4 border-orange-500";
                            } else {
                                matchClass =
                                    "border-l-4 border-gray-300 dark:border-gray-600";
                            }

                            return `
                    <div
                        class="px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer text-gray-900 dark:text-white ${matchClass}"
                        onclick="selectSuggestion('${inputId}', '${suggestion.text.replace(/'/g, "\\'")}')"
                        role="option"
                        aria-selected="false"
                    >
                        <div class="font-medium">${suggestion.text}</div>

                    </div>
                `;
                        })
                        .join("");
                    suggestionsDiv.classList.remove("hidden");
                } else {
                    suggestionsDiv.classList.add("hidden");
                }
            }

            async function selectSuggestion(
                inputId: string,
                suggestion: string
            ) {
                const input = document.getElementById(
                    inputId
                ) as HTMLInputElement;
                input.value = suggestion;

                const suggestions = await getAutocompleteSuggestions(
                    suggestion,
                    courseData,
                    inputId as "course" | "teacher"
                );

                if (suggestions.length > 0) {
                    if (inputId === "course") {
                        const errorDiv = document.getElementById(
                            "class-code-error"
                        ) as HTMLDivElement;
                        errorDiv.classList.add("hidden");
                    }
                }

                clearSuggestions(inputId);
            }

            function clearSuggestions(inputId: string) {
                const suggestionsDiv = document.getElementById(
                    `${inputId}-suggestions`
                );
                if (suggestionsDiv) {
                    suggestionsDiv.innerHTML = "";
                    suggestionsDiv.classList.add("hidden");
                }
            }

            function handleClassCodeInput(value: string) {
                const select = document.getElementById(
                    "class-code"
                ) as HTMLSelectElement;
                const input = document.getElementById(
                    "class-code-text"
                ) as HTMLInputElement;
                const errorDiv = document.getElementById(
                    "class-code-error"
                ) as HTMLDivElement;

                let parsedInput = value.toUpperCase();

                if (
                    parsedInput.length > 0 &&
                    parsedInput.length !== 3 &&
                    parsedInput.length !== 4
                ) {
                    errorDiv.textContent =
                        input.dataset.errorMessage ||
                        "3〜4文字のIDのみ許可されています";
                    errorDiv.classList.remove("hidden");

                    parsedInput = parsedInput.slice(0, 4);
                } else {
                    errorDiv.classList.add("hidden");
                }

                if (parsedInput !== value) {
                    input.value = parsedInput;
                }

                if (parsedInput.length === 3 || parsedInput.length === 4) {
                    const options = Array.from(select.options);
                    const matchingOption = options.find((option) => {
                        if (!option.value) return false;
                        const optionCode = parseClassCode(option.value);
                        return optionCode === parsedInput;
                    });

                    if (matchingOption) {
                        select.value = matchingOption.value;
                        errorDiv.classList.add("hidden");
                    } else if (parsedInput.length > 0) {
                        errorDiv.textContent = "一致する設置部局がありません";
                        errorDiv.classList.remove("hidden");
                    }
                } else {
                    select.value = "";
                }
            }

            function handleClassCodeSelect(value: string) {
                const input = document.getElementById(
                    "class-code-text"
                ) as HTMLInputElement;
                const errorDiv = document.getElementById(
                    "class-code-error"
                ) as HTMLDivElement;

                input.value = parseClassCode(value);
                errorDiv.classList.add("hidden");
            }

            window.handleInput = handleInput;
            window.clearSuggestions = clearSuggestions;
            window.selectSuggestion = selectSuggestion;
            window.handleClassCodeInput = handleClassCodeInput;
            window.handleClassCodeSelect = handleClassCodeSelect;

            window.addEventListener("astro:page-swap", async () => {
                courseData = [];
                await fetchCourseData();
            });

            if (document.getElementById("class-code")) {
                handleClassCodeSelect(
                    (document.getElementById("class-code") as HTMLSelectElement)
                        .value
                );
            }
        }
    }
    customElements.define("astro-search-from", AstroSearchForm);
</script>
