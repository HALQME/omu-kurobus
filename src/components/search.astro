---
import type { Course, SearchQuery } from "@/types/schema";
interface Props {
    target: "search" | "submit";
}
const { target } = Astro.props;
import { AVAILABLE_PAIRS, CLASS_IDs } from "@/utils/const";
import { search, getAutocompleteSuggestions } from "@/utils/search";

export const prerender = true;

function parseClassCode(code: string): string {
    if (!code) return "";
    if (code.length === 14) {
        return code.substring(4, 6);
    }
    return code;
}
---

<div class="max-w-3xl mx-auto">
    <form
        id="searchForm"
        class="bg-white dark:bg-gray-900 rounded-lg p-6 space-y-4 transition-colors"
        onsubmit="return false;"
    >
        <div class="mb-4">
            <label
                for="year_semester"
                class="block text-gray-700 dark:text-gray-300 font-medium mb-2"
            >
                年・学期
            </label>
            <select
                id="year_semester"
                name="year_semester"
                class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
                {
                    AVAILABLE_PAIRS().map(
                        (pair) =>
                            pair.type === target && (
                                <option
                                    value={`${pair.path.year}/${pair.path.semester}`}
                                >
                                    {pair.path.year}年度{" "}
                                    {pair.path.semester === "0"
                                        ? "前期"
                                        : "後期"}
                                </option>
                            )
                    )
                }
            </select>
        </div>

        <div class="mb-4 relative">
            <label
                for="course"
                class="block text-gray-700 dark:text-gray-300 font-medium mb-2"
            >
                授業名
            </label>
            <input
                id="course"
                name="course"
                type="text"
                class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                autocomplete="off"
                oninput="handleInput('course', 'course')"
                onblur="setTimeout(() => clearSuggestions('course'), 200)"
            />
            <div
                id="course-suggestions"
                class="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg hidden"
            >
            </div>
        </div>

        <div class="mb-4 relative">
            <label
                for="teacher"
                class="block text-gray-700 dark:text-gray-300 font-medium mb-2"
            >
                教員名
            </label>
            <input
                id="teacher"
                name="teacher"
                type="text"
                class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                autocomplete="off"
                oninput="handleInput('teacher', 'teacher')"
                onblur="setTimeout(() => clearSuggestions('teacher'), 200)"
            />
            <div
                id="teacher-suggestions"
                class="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg hidden"
            >
            </div>
        </div>

        <div class="mb-4">
            <label
                for="campus"
                class="block text-gray-700 dark:text-gray-300 font-medium mb-2"
            >
                キャンパス
            </label>
            <div class="grid grid-cols-2 sm:grid-cols-4 gap-3 checkbox-group">
                {
                    [
                        { value: "0", label: "中百舌鳥C" },
                        { value: "1", label: "杉本C" },
                        { value: "2", label: "遠隔授業" },
                        { value: "3", label: "その他" },
                    ].map(({ value, label }) => (
                        <div class="flex items-center space-x-2 checkbox-item">
                            <input
                                type="checkbox"
                                id={`campus-${value}`}
                                name="campus"
                                value={value}
                                class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800"
                            />
                            <label
                                for={`campus-${value}`}
                                class="text-gray-700 dark:text-gray-300"
                            >
                                {label}
                            </label>
                        </div>
                    ))
                }
            </div>
        </div>

        <div class="mb-4">
            <label
                for="class-code"
                class="block text-gray-700 dark:text-gray-300 font-medium mb-2"
            >
                設置部局
            </label>
            <div class="flex flex-col sm:flex-row gap-2">
                <div class="relative flex-1">
                    <input
                        type="text"
                        id="class-code-text"
                        class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white h-10"
                        placeholder="設置部局のIDを入力"
                        autocomplete="off"
                        oninput="handleClassCodeInput(this.value)"
                        maxlength="4"
                        data-error-message="2〜4文字のIDのみ許可されています"
                    />
                    <div
                        id="class-code-error"
                        class="text-red-500 text-sm mt-1 hidden"
                    >
                    </div>
                </div>
                <div class="sm:w-64 w-full">
                    <select
                        id="class-code"
                        name="class-code"
                        class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white h-10"
                        onchange="handleClassCodeSelect(this.value)"
                    >
                        <option value="">選択してください</option>
                        {
                            CLASS_IDs.map((group) =>
                                group.group ? (
                                    <optgroup
                                        label={group.group}
                                        class="font-medium"
                                    >
                                        {group.items.map((item) => (
                                            <option
                                                value={item.id}
                                                data-name={item.name}
                                            >
                                                {item.name}
                                            </option>
                                        ))}
                                    </optgroup>
                                ) : (
                                    group.items.map((item) => (
                                        <option
                                            value={item.id}
                                            data-name={item.name}
                                        >
                                            {item.name}
                                        </option>
                                    ))
                                )
                            )
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="mt-6">
            <button
                type="submit"
                class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:bg-blue-500 dark:hover:bg-blue-600"
            >
                検索
            </button>
        </div>
    </form>

    <div id="searchResults" class="mt-8"></div>
</div>

<script>
    import { search, getAutocompleteSuggestions } from "@/utils/search";
    import type { SearchQuery } from "@/types/schema";
    import type { Course } from "@/types/schema";

    declare global {
        interface Window {
            handleInput: (inputId: string, field: "course" | "teacher") => void;
            clearSuggestions: (inputId: string) => void;
            selectSuggestion: (inputId: string, suggestion: string) => void;
            handleClassCodeInput: (value: string) => void;
            handleClassCodeSelect: (value: string) => void;
            courseData: Course[];
        }
    }

    async function initializeCourseData() {
        try {
            const yearSemesterSelect = document.getElementById("year_semester");
            if (!(yearSemesterSelect instanceof HTMLSelectElement)) return;

            const [year, semester] = yearSemesterSelect.value.split("/");
            const courseUrl = new URL(
                `course/${year}/${semester}/search.json`,
                window.location.origin
            );
            const response = await fetch(courseUrl);
            if (!response.ok) {
                throw new Error(`Failed to fetch courses: ${response.status}`);
            }
            const json = await response.json();
            window.courseData = Array.isArray(json) ? json : json.data;
        } catch (error) {
            console.error("Error loading course data:", error);
            window.courseData = [];
        }
    }

    interface Suggestion {
        text: string;
        score: number | undefined;
        details?: {
            teachers?: string;
            campus?: string;
            classCode?: string;
        };
    }

    function getCampusName(campus: string): string {
        const campusMap: { [key: string]: string } = {
            "0": "中百舌鳥",
            "1": "杉本",
            "2": "遠隔",
            "3": "その他",
        };
        return campusMap[campus] || campus;
    }

    const suggestionCache = new Map<
        string,
        { data: any[]; timestamp: number }
    >();
    const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes
    let debounceTimer: ReturnType<typeof setTimeout>;
    const DEBOUNCE_DELAY = 300;

    function getCachedSuggestions(cacheKey: string): any[] | null {
        const cached = suggestionCache.get(cacheKey);
        if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
            return cached.data;
        }
        return null;
    }

    function cacheSuggestions(cacheKey: string, data: any[]) {
        suggestionCache.set(cacheKey, {
            data,
            timestamp: Date.now(),
        });
    }

    async function handleInput(inputId: string, field: "course" | "teacher") {
        const input = document.getElementById(inputId) as HTMLInputElement;
        const suggestionsDiv = document.getElementById(
            `${inputId}-suggestions`
        );
        if (!(suggestionsDiv instanceof HTMLDivElement)) return;

        clearTimeout(debounceTimer);
        const searchText = input.value.trim();
        if (!searchText || searchText.length < 2) {
            suggestionsDiv.innerHTML = "";
            suggestionsDiv.classList.add("hidden");
            return;
        }

        debounceTimer = setTimeout(async () => {
            try {
                const cacheKey = `${field}:${searchText}`;
                let suggestions = getCachedSuggestions(cacheKey);
                if (!suggestions && window.courseData) {
                    suggestions = await getAutocompleteSuggestions(
                        searchText,
                        window.courseData,
                        field
                    );
                    if (suggestions) cacheSuggestions(cacheKey, suggestions);
                }
                if (suggestions && suggestions.length > 0) {
                    suggestionsDiv.innerHTML = suggestions
                        .map(
                            (suggestion: Suggestion) => `
              <div
                class="px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer text-gray-900 dark:text-white"
                onclick="selectSuggestion('${inputId}', '${suggestion.text.replace(/'/g, "\\'")}')"
                role="option"
                aria-selected="false"
              >
                <div class="font-medium">${suggestion.text}</div>
                ${
                    suggestion.details
                        ? `<div class="text-sm text-gray-600 dark:text-gray-400">
                        ${suggestion.details.teachers ? `教員: ${suggestion.details.teachers}` : ""} 
                        ${suggestion.details.campus ? `/ ${suggestion.details.campus}` : ""} 
                        ${suggestion.details.classCode ? `/ ${parseClassCode(suggestion.details.classCode)}` : ""}
                      </div>`
                        : ""
                }
              </div>
            `
                        )
                        .join("");
                    suggestionsDiv.classList.remove("hidden");
                } else {
                    suggestionsDiv.classList.add("hidden");
                }
            } catch (error) {
                console.error("Error fetching suggestions:", error);
                suggestionsDiv.classList.add("hidden");
            }
        }, DEBOUNCE_DELAY);
    }

    function parseClassCode(code: string): string {
        if (!code) return "";
        if (code.length === 14) {
            return code.substring(4, 6);
        }
        return code;
    }

    async function handleFormSubmit(event: Event) {
        event.preventDefault();
        const form = event.target as HTMLFormElement;
        const formData = new FormData(form);
        const yearSemester = formData.get("year_semester")?.toString() || "";
        const [year = "", semester = ""] = yearSemester.split("/");

        const searchParams: SearchQuery = {
            year,
            semester,
            course: formData.get("course")?.toString() || "",
            teacher: formData.get("teacher")?.toString() || "",
            campus: formData.getAll("campus").map((v) => v.toString())[0] as
                | "0"
                | "1"
                | "2"
                | "3"
                | undefined,
            class_code: formData.get("class-code")?.toString() || "",
        };

        try {
            if (window.courseData) {
                const results = await search(searchParams, window.courseData);
                const resultsContainer =
                    document.getElementById("searchResults");
                if (resultsContainer) {
                    resultsContainer.innerHTML = renderSearchResults(results);
                }
            }
        } catch (error) {
            console.error("Error during search:", error);
            const resultsContainer = document.getElementById("searchResults");
            if (resultsContainer) {
                resultsContainer.innerHTML = `
          <div class="text-red-500 dark:text-red-400">
            検索中にエラーが発生しました。もう一度お試しください。
          </div>
        `;
            }
        }
    }

    function renderSearchResults(results: Course[]): string {
        if (results.length === 0) return "";
        return `
      <div class="mt-8 space-y-4">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
          検索結果 (${results.length}件)
        </h2>
        <div class="grid gap-4">
          ${results
              .map(
                  (result) => `
            <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
                ${result.name}
              </h3>
              <div class="text-sm text-gray-600 dark:text-gray-300 space-y-1">
                <p>教員: ${result.teachers}</p>
                <p>キャンパス: ${getCampusName(result.campus)}</p>
                <p>時間割コード: ${result.id}</p>
                ${
                    result.description
                        ? `
                  <p class="mt-2 text-gray-500 dark:text-gray-400">
                    ${result.description}
                  </p>`
                        : ""
                }
              </div>
            </div>
          `
              )
              .join("")}
        </div>
      </div>
    `;
    }

    async function selectSuggestion(inputId: string, suggestion: string) {
        try {
            const input = document.getElementById(inputId) as HTMLInputElement;
            input.value = suggestion;
            const cacheKey = `${inputId}:${suggestion}`;
            const cachedSuggestions = getCachedSuggestions(cacheKey);
            let details;
            if (cachedSuggestions && cachedSuggestions[0]?.details) {
                details = cachedSuggestions[0].details;
            } else if (window.courseData) {
                const suggestions = await getAutocompleteSuggestions(
                    suggestion,
                    window.courseData,
                    inputId as "course" | "teacher"
                );
                if (suggestions.length > 0 && suggestions[0].details) {
                    details = suggestions[0].details;
                    cacheSuggestions(cacheKey, suggestions);
                }
            }
            if (details) {
                if (inputId === "course" && details.teachers) {
                    const teacherInput = document.getElementById(
                        "teacher"
                    ) as HTMLInputElement;
                    teacherInput.value = details.teachers;
                }
                if (details.campus) {
                    document
                        .querySelectorAll('input[name="campus"]')
                        .forEach((element) => {
                            (element as HTMLInputElement).checked = false;
                        });
                    const campusMap: { [key: string]: string } = {
                        中百舌鳥: "0",
                        杉本: "1",
                        遠隔: "2",
                        その他: "3",
                    };
                    const campuses = details.campus.split("・");
                    campuses.forEach((campus: string) => {
                        const campusId = campusMap[campus];
                        if (campusId) {
                            const checkbox = document.getElementById(
                                `campus-${campusId}`
                            ) as HTMLInputElement;
                            if (checkbox) checkbox.checked = true;
                        }
                    });
                }
                if (details.classCode) {
                    const parsedCode = parseClassCode(details.classCode);
                    const classCodeSelect = document.getElementById(
                        "class-code"
                    ) as HTMLSelectElement;
                    const classCodeInput = document.getElementById(
                        "class-code-text"
                    ) as HTMLInputElement;
                    classCodeSelect.value = parsedCode;
                    classCodeInput.value = parsedCode;
                }
            }
        } catch (error) {
            console.error("Error fetching suggestion details:", error);
        }
        clearSuggestions(inputId);
    }

    function clearSuggestions(inputId: string) {
        const suggestionsDiv = document.getElementById(
            `${inputId}-suggestions`
        );
        if (suggestionsDiv) {
            suggestionsDiv.innerHTML = "";
            suggestionsDiv.classList.add("hidden");
        }
    }

    function handleClassCodeInput(value: string) {
        const select = document.getElementById(
            "class-code"
        ) as HTMLSelectElement;
        const input = document.getElementById(
            "class-code-text"
        ) as HTMLInputElement;
        const errorDiv = document.getElementById(
            "class-code-error"
        ) as HTMLDivElement;

        let parsedInput = value.toUpperCase();
        if (
            parsedInput.length > 0 &&
            parsedInput.length !== 2 &&
            parsedInput.length !== 3 &&
            parsedInput.length !== 4
        ) {
            errorDiv.textContent =
                input.dataset.errorMessage ||
                "2〜4文字のIDのみ許可されています";
            errorDiv.classList.remove("hidden");
            parsedInput = parsedInput.slice(0, 4);
        } else {
            errorDiv.classList.add("hidden");
        }

        if (parsedInput !== value) {
            input.value = parsedInput;
        }

        if (parsedInput.length >= 2 && 4 >= parsedInput.length ) {
            let found = false;
            const options = Array.from(select.options);
            for (const option of options) {
                if (!option.value) continue;
                const optionCode = parseClassCode(option.value);
                const normalizedInput = parsedInput.replace(/^1/, "");
                if (
                    optionCode === normalizedInput ||
                    option.value === parsedInput
                ) {
                    select.value = option.value;
                    found = true;
                    break;
                }
            }
            if (found) {
                errorDiv.classList.add("hidden");
            } else if (parsedInput.length > 0) {
                errorDiv.textContent = "一致する設置部局がありません";
                errorDiv.classList.remove("hidden");
            }
        } else {
            select.value = "";
        }
    }

    function handleClassCodeSelect(value: string) {
        const input = document.getElementById(
            "class-code-text"
        ) as HTMLInputElement;
        const errorDiv = document.getElementById(
            "class-code-error"
        ) as HTMLDivElement;
        input.value = parseClassCode(value);
        errorDiv.classList.add("hidden");
    }

    function initializeClientSide() {
        Object.assign(window, {
            handleInput,
            clearSuggestions,
            selectSuggestion,
            handleClassCodeInput,
            handleClassCodeSelect,
        });

        initializeCourseData();

        const form = document.getElementById("searchForm");
        if (form) {
            form.addEventListener("submit", handleFormSubmit);
        }

        document
            .getElementById("year_semester")
            ?.addEventListener("change", initializeCourseData);

        const classCode = document.getElementById("class-code");
        if (classCode instanceof HTMLSelectElement) {
            handleClassCodeSelect(classCode.value);
        }
    }

    window.addEventListener("load", initializeClientSide);
</script>
