---
import type { CourseSearchResult } from "@/types/schema";
import { styles } from "@/styles/style";
interface Props {
    target: "search" | "submit";
    year: string;
    semester: string;
    result: CourseSearchResult;
}
const { target, year, semester, result } = Astro.props;

const matchScore = (score: number | undefined) => {
    return (Math.round((1 - (score ?? 1)) * 10000) / 100).toFixed(2);
};

const truncateTeacherName = (name: string, maxLength: number = 15) => {
    return name && name.length > maxLength
        ? `${name.substring(0, maxLength)}...`
        : name;
};
---

<astro-result-content
    data-result-id={result.id}
    data-result-name={result.name}
    data-result-teachers={result.teachers}
    data-result-campus={result.campus}
    data-result-period={result.period}
    data-result-semester={result.semester}
    data-year={year}
    data-semester={semester}
    data-target={target}
    ><div class={styles.card.container}>
        <span class="hidden">
            {matchScore(result.score)}
            %
        </span>
        <div class="flex justify-between items-start mb-2">
            <h3 class={styles.card.title}>
                {result.name}
            </h3>
            <span
                class="px-2 py-0.5 text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded"
            >
                {result.id || "コード不明"}
            </span>
        </div>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
            <div class="flex">
                <span class={styles.card.label}> 教員: </span>
                <span class={styles.card.value} title={result.teachers || ""}>
                    {truncateTeacherName(result.teachers) || "記載なし"}
                </span>
            </div>
            <div class="flex">
                <span class={styles.card.label}> キャンパス: </span>
                <span class={styles.card.value}>
                    {result.campus || "記載なし"}
                </span>
            </div>
            <div class="flex">
                <span class={styles.card.label}> 時限: </span>
                <span class={styles.card.value}>
                    {result.period || "記載なし"}
                </span>
            </div>
            <div class="flex">
                <span class={styles.card.label}> 年度・学期: </span>
                <span class={styles.card.value}>
                    {result.semester || "記載なし"}
                </span>
            </div>
        </div>
        <button
            id=`button-${year}-${semester}-${result.id}`
            class="mt-3 block w-full text-center px-4 py-2 outline outline-blue-500 dark:outline-blue-700 rounded hover:bg-blue-600/20 dark:hover:bg-blue-800/20 transition-colors"
        >
            {target === "search" ? "詳細を見る" : "投稿する"}
        </button>
    </div>
</astro-result-content>

<script>
    import type { CourseSummary } from "@/types/schema";
    import * as nano from "@/utils/store";
    class AstroResultItem extends HTMLElement {
        constructor() {
            super();

            const result: CourseSummary = {
                id: this.getAttribute("data-result-id") as string,
                name: this.getAttribute("data-result-name") as string,
                teachers: this.getAttribute("data-result-teachers") as string,
                campus: this.getAttribute("data-result-campus") as string,
                period: this.getAttribute("data-result-period") as string,
                semester: this.getAttribute("data-result-semester") as string,
            };

            const year = this.getAttribute("data-year") as string;
            const semester = this.getAttribute("data-semester") as string;
            const target = this.getAttribute("data-target") as
                | "search"
                | "submit";
            const url = new URL(
                `/${target}/${year}/${semester}/${year}${result.id}`,
                window.location.origin
            );

            this.addEventListener("click", (e) => {
                if (
                    e.target instanceof HTMLButtonElement &&
                    e.target.id === `button-${year}-${semester}-${result.id}`
                ) {
                    e.preventDefault();
                    nano.setCourse({
                        id: year + result.id,
                        name: result.name,
                        teachers: result.teachers,
                        campus: result.campus,
                        period: result.period,
                        semester: result.semester,
                    });
                    window.location.href = url.href;
                }
            });
        }
    }

    customElements.define("astro-result-content", AstroResultItem);
</script>
